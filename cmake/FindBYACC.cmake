# - Find byacc executable and provides macros to generate custom build rules
# The module defines the following variables:
#
#  BYACC_EXECUTABLE - path to the byacc program
#  BYACC_VERSION - version of byacc
#  BYACC_FOUND - true if the program was found
#
# If byacc is found, the module defines the macros:
#  BYACC_TARGET(<Name> <YaccInput> <CodeOutput> [VERBOSE <file>]
#              [COMPILE_FLAGS <string>])
# which will create  a custom rule to generate  a parser. <YaccInput> is
# the path to  a yacc file. <CodeOutput> is the name  of the source file
# generated by byacc.  A header file is also  be generated, and contains
# the  token  list.  If  COMPILE_FLAGS  option is  specified,  the  next
# parameter is  added in the byacc  command line.  if  VERBOSE option is
# specified, <file> is created  and contains verbose descriptions of the
# grammar and parser. The macro defines a set of variables:
#  BYACC_${Name}_DEFINED - true is the macro ran successfully
#  BYACC_${Name}_INPUT - The input source file, an alias for <YaccInput>
#  BYACC_${Name}_OUTPUT_SOURCE - The source file generated by byacc
#  BYACC_${Name}_OUTPUT_HEADER - The header file generated by byacc
#  BYACC_${Name}_OUTPUTS - The sources files generated by byacc
#  BYACC_${Name}_COMPILE_FLAGS - Options used in the byacc command line
#
#  ====================================================================
#  Example:
#
#   find_package(BYACC)
#   BYACC_TARGET(MyParser parser.y ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp)
#   add_executable(Foo main.cpp ${BYACC_MyParser_OUTPUTS})
#  ====================================================================

#=============================================================================
# Copyright 2010 Petr Rockai
# Copyright 2009 Kitware, Inc.
# Copyright 2006 Tristan Carel
#
# Distributed under the OSI-approved BSD License (the "License");
# see accompanying file Copyright.txt for details.
#
# This software is distributed WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the License for more information.
#=============================================================================
# (To distributed this file outside of CMake, substitute the full
#  License text for the above reference.)

FIND_PROGRAM(BYACC_EXECUTABLE NAMES byacc yacc DOC "path to the byacc executable")
MARK_AS_ADVANCED(BYACC_EXECUTABLE)

IF(BYACC_EXECUTABLE)

  EXECUTE_PROCESS(COMMAND ${BYACC_EXECUTABLE} -V
    OUTPUT_VARIABLE BYACC_version_output
    ERROR_VARIABLE BYACC_version_error
    RESULT_VARIABLE BYACC_version_result
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  IF(NOT ${BYACC_version_result} EQUAL 0)
    MESSAGE(SEND_ERROR "Command \"${BYACC_EXECUTABLE} --version\" failed with output:\n${BYACC_version_error}")
  ELSE()
    STRING(REGEX REPLACE "^byacc \\(GNU Byacc\\) ([^\n]+)\n.*" "\\1"
      BYACC_VERSION "${BYACC_version_output}")
  ENDIF()

  # internal macro
  MACRO(BYACC_TARGET_option_verbose Name ByaccOutput filename)
    LIST(APPEND BYACC_TARGET_cmdopt "-v")
    GET_FILENAME_COMPONENT(BYACC_TARGET_output_path "${ByaccOutput}" PATH)
    GET_FILENAME_COMPONENT(BYACC_TARGET_output_name "${ByaccOutput}" NAME_WE)
    ADD_CUSTOM_COMMAND(OUTPUT ${filename}
      COMMAND ${CMAKE_COMMAND}
      ARGS -E copy
      "${BYACC_TARGET_output_path}/${BYACC_TARGET_output_name}.output"
      "${filename}"
      DEPENDS
      "${BYACC_TARGET_output_path}/${BYACC_TARGET_output_name}.output"
      COMMENT "[BYACC][${Name}] Copying byacc verbose table to ${filename}"
      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
    SET(BYACC_${Name}_VERBOSE_FILE ${filename})
    LIST(APPEND BYACC_TARGET_extraoutputs
      "${BYACC_TARGET_output_path}/${BYACC_TARGET_output_name}.output")
  ENDMACRO(BYACC_TARGET_option_verbose)

  # internal macro
  MACRO(BYACC_TARGET_option_extraopts Options)
    SET(BYACC_TARGET_extraopts "${Options}")
    SEPARATE_ARGUMENTS(BYACC_TARGET_extraopts)
    LIST(APPEND BYACC_TARGET_cmdopt ${BYACC_TARGET_extraopts})
  ENDMACRO(BYACC_TARGET_option_extraopts)

  #============================================================
  # BYACC_TARGET (public macro)
  #============================================================
  #
  MACRO(BYACC_TARGET Name ByaccInput ByaccOutput)
    SET(BYACC_TARGET_output_header "")
    SET(BYACC_TARGET_command_opt "")
    SET(BYACC_TARGET_outputs "${ByaccOutput}")
    IF(NOT ${ARGC} EQUAL 3 AND NOT ${ARGC} EQUAL 5 AND NOT ${ARGC} EQUAL 7)
      MESSAGE(SEND_ERROR "Usage")
    ELSE()
      # Parsing parameters
      IF(${ARGC} GREATER 5 OR ${ARGC} EQUAL 5)
        IF("${ARGV3}" STREQUAL "VERBOSE")
          BYACC_TARGET_option_verbose(${Name} ${ByaccOutput} "${ARGV4}")
        ENDIF()
        IF("${ARGV3}" STREQUAL "COMPILE_FLAGS")
          BYACC_TARGET_option_extraopts("${ARGV4}")
        ENDIF()
      ENDIF()

      IF(${ARGC} EQUAL 7)
        IF("${ARGV5}" STREQUAL "VERBOSE")
          BYACC_TARGET_option_verbose(${Name} ${ByaccOutput} "${ARGV6}")
        ENDIF()
      
        IF("${ARGV5}" STREQUAL "COMPILE_FLAGS")
          BYACC_TARGET_option_extraopts("${ARGV6}")
        ENDIF()
      ENDIF()

      # Header's name generated by byacc (see option -d)
      LIST(APPEND BYACC_TARGET_cmdopt "-d")
      STRING(REGEX REPLACE "^(.*)(\\.[^.]*)$" "\\2" _fileext "${ARGV2}")
      STRING(REPLACE "cpp" "h" _fileext ${_fileext})
      STRING(REPLACE "c" "h" _fileext ${_fileext})
      STRING(REGEX REPLACE "^(.*)(\\.[^.]*)$" "\\1${_fileext}" 
          BYACC_${Name}_OUTPUT_HEADER "${ARGV2}")
      LIST(APPEND BYACC_TARGET_outputs "${BYACC_${Name}_OUTPUT_HEADER}")
        
      ADD_CUSTOM_COMMAND(OUTPUT ${BYACC_TARGET_outputs}
        ${BYACC_TARGET_extraoutputs}
        COMMAND ${BYACC_EXECUTABLE}
        ARGS ${BYACC_TARGET_cmdopt} -o ${ARGV2} ${ARGV1}
        DEPENDS ${ARGV1}
        COMMENT "[BYACC][${Name}] Building parser with byacc ${BYACC_VERSION}"
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
    
      # define target variables
      SET(BYACC_${Name}_DEFINED TRUE)
      SET(BYACC_${Name}_INPUT ${ARGV1})
      SET(BYACC_${Name}_OUTPUTS ${BYACC_TARGET_outputs})
      SET(BYACC_${Name}_COMPILE_FLAGS ${BYACC_TARGET_cmdopt})
      SET(BYACC_${Name}_OUTPUT_SOURCE "${ByaccOutput}")

    ENDIF(NOT ${ARGC} EQUAL 3 AND NOT ${ARGC} EQUAL 5 AND NOT ${ARGC} EQUAL 7)
  ENDMACRO(BYACC_TARGET)
  #
  #============================================================

ENDIF(BYACC_EXECUTABLE)

INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(BYACC DEFAULT_MSG BYACC_EXECUTABLE)

# FindBYACC.cmake ends here
